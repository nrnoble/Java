package nrnoble;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Connection;
import java.util.concurrent.ThreadLocalRandom;

public class Utilities
{

	public Utilities()
	{
		// nothing to do here
	}
	
	
	/**
	 * Generate a random numbers between RANDOMLOW and RANDOMHIGH
	 * excluding zero from the random numbers to reduce division 
	 * by zero errors
	 * @return a random number, excluding zero
	 */
	 private static int randTestNum(int _low, int _high)
	 {
		  int randNum = 0;
	      while(randNum == 0)
	      { 
	    	  randNum = randInt(_low,_high);
	      }
		 return randNum;
	 }
	 
	 /**
	  * 
	  * @param _min lowest random value
	  * @param _max highest random value
	  * @return
	  */
	 public static int randInt(int _min, int _max)
	{
		return ThreadLocalRandom.current().nextInt(_min, _max + 1);
	 
	}
	 
	/**
	 *  
	 * @param connnectToRemoteDB connection to DB
	 * @param _fruit fruit object
	 * @return status of insert query
	 * @throws SQLException exception
	 */
	public static int insertFruit(Connection connnectToRemoteDB, Fruit _fruit) throws SQLException
	{
		//create a statement and query
		Statement stmt = connnectToRemoteDB.createStatement();
		return stmt.executeUpdate(_fruit.sqlInsertQuery());	
	}
	/**
	 *  
	 * @param connnectToRemoteDB connection to DB
	 * @param _fruit fruit object
	 * @return status of insert query
	 * @throws SQLException exception
	 * @return ResultSet
	 */
	public static ResultSet viewFruit(Connection connnectToRemoteDB, Fruit _fruit) throws SQLException
	{
		//create a statement and query
		Statement stmt = connnectToRemoteDB.createStatement();
		return stmt.executeQuery(_fruit.sqlSelectQuery());	
	}
	
}
	 
	 

