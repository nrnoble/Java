
public class Main
{
	private static final int SHIFT = 1;
	private static final String EMPTY = "";
	private static final int ZERO = 0;
	private static final String SPACE = " ";
	
	private static enum Balls
	{
		RED 	(0b00000001), // 1
		WHITE 	(0b00000010), // 2
		BLUE	(0b00000100); // 4
		
		@SuppressWarnings("unused")
		private int value;

	    private Balls(int value)
	    {
	        this.value = value;
	    }
	}
	
	public Main()
	{
		
	}

	@SuppressWarnings("unused") 
	public static void main(String[] args)
	
	{
		int subSets = ZERO;
		
		// Calculate total possible sets
		for (Balls ball : Balls.values())
		{
			subSets = (subSets << SHIFT ) | 1 ;
		}

		for (int x  = 0; x <= _numOfSets; x++)
		{
			displaySet(subSets, Balls.values().length);
		}
		
	}

	
	private static void displaySet (int _numOfSets,int _numOfBits)
	{
			String set = EMPTY;

			String binStr = displayAsBinary (x,_numOfBits);
			set = getSet(_numOfSets, _numOfBits);
			System.out.println(binStr + SPACE + set);
		
	}
	
	
	private static String getSet (int _num,int _numOfbits)
	{
		
		int mask = 1;
		String setItems = EMPTY;
		
		for (int x = 0; x < _numOfbits; x++)
		{	
			int result = (_num & mask);
			if (isTrue(result))
			{
				setItems = setItems + Balls.values()[x] + SPACE;
			}
			mask =  mask << 1;
		}
		return setItems;
	}
	
	
	private static String displayAsBinary (int _num, int _numOfbits)
	{
		String binString = EMPTY;	
		int mask = 1;
		for (int x = 0; x < _numOfbits; x++)
		{	
			int result = (_num & mask);
			binString += bitToString(result);
			mask =  mask << 1;
		}
		
		binString = new StringBuilder(binString).reverse().toString();
		//System.out.println(binString);
		return binString;
	}

	// Returns true for any value other than 0;
	private static boolean isTrue(int _num)
	{
		if (_num == 0)
		{
			return false;
		}
		
		return true;
	}
	
	// Return "1" for all values except "0". Zero returns "0";
	private static String bitToString(int _bit)
	{
		if (isTrue (_bit))
		{
			return "1";
		}
		
		return "0";	
	}


}
