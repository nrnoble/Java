package nrnoble;

import Exceptions.DivideByZeroException;
import Exceptions.NullArgumentException;

/*
 * Create a class that stores rational numbers. It should have the following fields/methods:
 *
 * Fields
 * int numerator
 * int denominator
 * Methods
 * public Rational(int numerator, int denominator) //constructor
 * public Rational(Rational numerator, Rational denominator) //constructor
 * public int getNumerator()
 * public int getDenominator()
 * public String toString()
 * public Rational add(Rational other)
 * public Rational subtract(Rational other)
 * public Rational multiply(Rational other)
 * public Rational divide(Rational other)
 *  
 */


/**
* @author  Neal Noble<br>
* IT301<br>
* Exercises – Custom Exceptions<br>
* January 29th, 2016<br>
*/
public class Rational extends Main
{
	 private int numerator = 0;
	 private int denominator = 0;
	 
	 // Preserving original values
	 private int orginalNumeratorValue;
	 private int orginalDenominatorValue;
	 

	 private Rational()
	{
		// made private so that it can not called.
	}

	 
	 /**
	  * Constructor
	  * @param _numerator any positive or negative integer value
	  * @param _denominator any positive or negative integer value
	  */
	 public Rational(int _numerator, int _denominator)
	 {
		 this.numerator = _numerator;
		 this.denominator = _denominator; 
		 //this.simplify();
	 }
	 
	 
	 /**
	  * Constructor
	  * @param _numerator rational object
	  * @param _denominator rational object
	 * @throws Exception 
	  */
	 public Rational(Rational _numerator, Rational _denominator) throws NullArgumentException
     {
		
		 // check parameters for null values. Throw error if null is detected.
		 if (_numerator == null && _denominator == null)
		 {
			 throw new NullArgumentException("Numerator and Denominator objects can not be null");
		 }
		 
	
		 // Just check the numerator
		 if (_numerator == null)
		 {
			 throw new NullArgumentException("Numerator object can not be null");
		 }
		 
		 
		 // Just check the denominator
		 if (_denominator == null)
		 {
			 throw new NullArgumentException("Denominator object can not be null");
		 }
		 
		 // checks has passed for both Numerator and denominator, 
		 // assign values to internal values.
		 
		 this.numerator = _numerator.getNumerator();
		 this.denominator = _denominator.getDenominator(); 
		 this.orginalNumeratorValue = this.denominator;
		 this.orginalDenominatorValue = this.denominator;
	 }
	 
	 
	 /**
	  * Get the numerator value
	  * @return the internal Numerator of this object
	  */
	 public int getNumerator()
     {
		 return this.numerator;
	 }
	 
	 
	 /**
	  * Get the Denominator value
	  * @return the internal Denominator of this object
	  */
	 public int getDenominator()
     { 
		 return this.denominator;
	 }
	
	 
	 /**
	  * @return the numerator and denominator as a string
	  */
	 public String toString()
     {
		
		 return "Numerator:   " + this.numerator + "\nDenominator: " + this.denominator;
	 }
	 
	 
	 /**
	  * Addition of two rational numbers
	  * @param _rationalObj Rational object
	  * @return the value of two rational objects added together
	  * @throws NullArgumentException when Rational object parameter is null
      */
	 public Rational add(Rational _rationalObj) throws NullArgumentException
     {
		   
		 if (_rationalObj == null)
		 {
			 throw new NullArgumentException("Can not complete addition operation because parameter is null");
			 
		 }
		 
		  // use conventional math symbols as vars
		  int a = this.numerator;
		  int b = this.denominator;
		  int c = _rationalObj.getNumerator();
		  int d = _rationalObj.getDenominator();
		  
		  // create these for display output
		  int numerator = (a * d) + (b * c) ;
		  int denominator = b * d;   
		  
		  // assign to internal fields and simplify
		  this.numerator = numerator;
		  this.denominator = denominator;
		  simplify();
		  
		  
		  
		  System.out.println("      " + a +  "     " + c  + "        (" + a + " * " + d + ") + (" + b + " * " + c +")       " + numerator + "       " + this.numerator);
		  System.out.println("     --- + ---  =  --------------------  =  ---  =  ---");
		  System.out.println("      " + b  + "     " + d  + "              " + b + " * " + d + "             " + denominator + "       " + this.denominator);
		  System.out.println();
		  
		 return  new Rational(this.numerator,this.denominator);
	 }
	 
	 
	 
	 /**
	  * Subtraction of rational numbers
	  * @param _rationalObj Rational object
	  * @return the value of rational number subtracted. j
	  * @throws NullArgumentException when Rational object parameter is null
	  */
	 public Rational subtract(Rational _rationalObj) throws NullArgumentException
     {
		 
		 if (_rationalObj == null)
		 {
			 throw new NullArgumentException("Can not complete subtraction operation because parameter is null");
			 
		 }
		 
		 Rational rational = new Rational();
		 
		 return rational;
	 }
	 
	 

	 /**
	  * Multiple of two ration numbers
	  * @param _rationalObj Rational object
	  * @return the value of two rational objects multiplied together
	  * @throws NullArgumentException when Rational object parameter is null
	  */
	 public Rational multiply(Rational _rationalObj) throws NullArgumentException
     {
		 if (_rationalObj == null)
		 {
			 throw new NullArgumentException("Can not complete multiplcation operation because parameter is null");
			 
		 }
		 
		 
		 Rational rational = new Rational();

		 return rational; 
	 }
	 
	 
/**
 * 
	 /**
	  * Division of two rational numbers
	  * @param _rationalObj Rational object
	  * @return the value of the division of a rational number.
	 *  @throws DivideByZeroException when there is a division by zero occurs
	 *  @throws NullArgumentException when Rational object parameter is null
	 */
	 public Rational divide(Rational _rationalObj) throws DivideByZeroException, NullArgumentException
     {
		 
		 if (_rationalObj == null)
		 {
			 throw new NullArgumentException("Can not complete division operation because parameter is null");
			 
		 }
		 
		 Rational rational = new Rational();
		 
		 return rational;
	 }
	 
	 

	 private int gcd(int _numerator, int _denominator)
	 {
	     if (_denominator == 0)
	     {
	    	 return _numerator;
	     }
	     return gcd(_denominator ,_numerator % _denominator);
	 }

	 /**
	  * reduce fraction to the smallest.
	  */
	 private void simplify()
	 {
	     int commonDenominator = gcd(this.numerator, this.denominator);
	     this.numerator /= commonDenominator;
	     this.denominator /= commonDenominator;
	 }

	 
	 
	
}
